/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package io.datadynamics.template.avro.model.types2;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class DataTypes2 extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -6798112875297171145L;


  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"DataTypes2\",\"namespace\":\"io.datadynamics.template.avro.model.types2\",\"fields\":[{\"name\":\"TypeBoolean\",\"type\":[\"null\",\"boolean\"]},{\"name\":\"TypeInt\",\"type\":[\"null\",\"int\"]},{\"name\":\"TypeLong\",\"type\":[\"null\",\"long\"]},{\"name\":\"TypeFloat\",\"type\":[\"null\",\"float\"]},{\"name\":\"TypeDouble\",\"type\":[\"null\",\"double\"]},{\"name\":\"TypeString\",\"type\":[\"null\",\"string\"]},{\"name\":\"TypeBytesDecimal\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":6,\"scale\":2}]},{\"name\":\"TypeDate\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"date\"}]},{\"name\":\"TypeTimeInMillis\",\"type\":[\"null\",{\"type\":\"int\",\"logicalType\":\"time-millis\"}]},{\"name\":\"TypeTimeInMicros\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"time-micros\"}]},{\"name\":\"TypeTimestampInMillis\",\"type\":[\"null\",{\"type\":\"long\",\"logicalType\":\"timestamp-millis\"}]},{\"name\":\"TypeStringTimestampInMillis\",\"type\":[\"null\",{\"type\":\"string\",\"logicalType\":\"timestamp-millis\"}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static final SpecificData MODEL$ = new SpecificData();
  static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.DateConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimestampMillisConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimeMicrosConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
    MODEL$.addLogicalTypeConversion(new org.apache.avro.data.TimeConversions.TimeMillisConversion());
  }

  private static final BinaryMessageEncoder<DataTypes2> ENCODER =
      new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<DataTypes2> DECODER =
      new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<DataTypes2> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<DataTypes2> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<DataTypes2> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this DataTypes2 to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a DataTypes2 from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a DataTypes2 instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static DataTypes2 fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  private java.lang.Boolean TypeBoolean;
  private java.lang.Integer TypeInt;
  private java.lang.Long TypeLong;
  private java.lang.Float TypeFloat;
  private java.lang.Double TypeDouble;
  private java.lang.CharSequence TypeString;
  private java.math.BigDecimal TypeBytesDecimal;
  private java.time.LocalDate TypeDate;
  private java.time.LocalTime TypeTimeInMillis;
  private java.time.LocalTime TypeTimeInMicros;
  private java.time.Instant TypeTimestampInMillis;
  private java.lang.CharSequence TypeStringTimestampInMillis;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public DataTypes2() {}

  /**
   * All-args constructor.
   * @param TypeBoolean The new value for TypeBoolean
   * @param TypeInt The new value for TypeInt
   * @param TypeLong The new value for TypeLong
   * @param TypeFloat The new value for TypeFloat
   * @param TypeDouble The new value for TypeDouble
   * @param TypeString The new value for TypeString
   * @param TypeBytesDecimal The new value for TypeBytesDecimal
   * @param TypeDate The new value for TypeDate
   * @param TypeTimeInMillis The new value for TypeTimeInMillis
   * @param TypeTimeInMicros The new value for TypeTimeInMicros
   * @param TypeTimestampInMillis The new value for TypeTimestampInMillis
   * @param TypeStringTimestampInMillis The new value for TypeStringTimestampInMillis
   */
  public DataTypes2(java.lang.Boolean TypeBoolean, java.lang.Integer TypeInt, java.lang.Long TypeLong, java.lang.Float TypeFloat, java.lang.Double TypeDouble, java.lang.CharSequence TypeString, java.math.BigDecimal TypeBytesDecimal, java.time.LocalDate TypeDate, java.time.LocalTime TypeTimeInMillis, java.time.LocalTime TypeTimeInMicros, java.time.Instant TypeTimestampInMillis, java.lang.CharSequence TypeStringTimestampInMillis) {
    this.TypeBoolean = TypeBoolean;
    this.TypeInt = TypeInt;
    this.TypeLong = TypeLong;
    this.TypeFloat = TypeFloat;
    this.TypeDouble = TypeDouble;
    this.TypeString = TypeString;
    this.TypeBytesDecimal = TypeBytesDecimal;
    this.TypeDate = TypeDate;
    this.TypeTimeInMillis = TypeTimeInMillis;
    this.TypeTimeInMicros = TypeTimeInMicros;
    this.TypeTimestampInMillis = TypeTimestampInMillis;
    this.TypeStringTimestampInMillis = TypeStringTimestampInMillis;
  }

  @Override
  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }

  @Override
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }

  // Used by DatumWriter.  Applications should not call.
  @Override
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return TypeBoolean;
    case 1: return TypeInt;
    case 2: return TypeLong;
    case 3: return TypeFloat;
    case 4: return TypeDouble;
    case 5: return TypeString;
    case 6: return TypeBytesDecimal;
    case 7: return TypeDate;
    case 8: return TypeTimeInMillis;
    case 9: return TypeTimeInMicros;
    case 10: return TypeTimestampInMillis;
    case 11: return TypeStringTimestampInMillis;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @Override
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: TypeBoolean = (java.lang.Boolean)value$; break;
    case 1: TypeInt = (java.lang.Integer)value$; break;
    case 2: TypeLong = (java.lang.Long)value$; break;
    case 3: TypeFloat = (java.lang.Float)value$; break;
    case 4: TypeDouble = (java.lang.Double)value$; break;
    case 5: TypeString = (java.lang.CharSequence)value$; break;
    case 6: TypeBytesDecimal = (java.math.BigDecimal)value$; break;
    case 7: TypeDate = (java.time.LocalDate)value$; break;
    case 8: TypeTimeInMillis = (java.time.LocalTime)value$; break;
    case 9: TypeTimeInMicros = (java.time.LocalTime)value$; break;
    case 10: TypeTimestampInMillis = (java.time.Instant)value$; break;
    case 11: TypeStringTimestampInMillis = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'TypeBoolean' field.
   * @return The value of the 'TypeBoolean' field.
   */
  public java.lang.Boolean getTypeBoolean() {
    return TypeBoolean;
  }


  /**
   * Sets the value of the 'TypeBoolean' field.
   * @param value the value to set.
   */
  public void setTypeBoolean(java.lang.Boolean value) {
    this.TypeBoolean = value;
  }

  /**
   * Gets the value of the 'TypeInt' field.
   * @return The value of the 'TypeInt' field.
   */
  public java.lang.Integer getTypeInt() {
    return TypeInt;
  }


  /**
   * Sets the value of the 'TypeInt' field.
   * @param value the value to set.
   */
  public void setTypeInt(java.lang.Integer value) {
    this.TypeInt = value;
  }

  /**
   * Gets the value of the 'TypeLong' field.
   * @return The value of the 'TypeLong' field.
   */
  public java.lang.Long getTypeLong() {
    return TypeLong;
  }


  /**
   * Sets the value of the 'TypeLong' field.
   * @param value the value to set.
   */
  public void setTypeLong(java.lang.Long value) {
    this.TypeLong = value;
  }

  /**
   * Gets the value of the 'TypeFloat' field.
   * @return The value of the 'TypeFloat' field.
   */
  public java.lang.Float getTypeFloat() {
    return TypeFloat;
  }


  /**
   * Sets the value of the 'TypeFloat' field.
   * @param value the value to set.
   */
  public void setTypeFloat(java.lang.Float value) {
    this.TypeFloat = value;
  }

  /**
   * Gets the value of the 'TypeDouble' field.
   * @return The value of the 'TypeDouble' field.
   */
  public java.lang.Double getTypeDouble() {
    return TypeDouble;
  }


  /**
   * Sets the value of the 'TypeDouble' field.
   * @param value the value to set.
   */
  public void setTypeDouble(java.lang.Double value) {
    this.TypeDouble = value;
  }

  /**
   * Gets the value of the 'TypeString' field.
   * @return The value of the 'TypeString' field.
   */
  public java.lang.CharSequence getTypeString() {
    return TypeString;
  }


  /**
   * Sets the value of the 'TypeString' field.
   * @param value the value to set.
   */
  public void setTypeString(java.lang.CharSequence value) {
    this.TypeString = value;
  }

  /**
   * Gets the value of the 'TypeBytesDecimal' field.
   * @return The value of the 'TypeBytesDecimal' field.
   */
  public java.math.BigDecimal getTypeBytesDecimal() {
    return TypeBytesDecimal;
  }


  /**
   * Sets the value of the 'TypeBytesDecimal' field.
   * @param value the value to set.
   */
  public void setTypeBytesDecimal(java.math.BigDecimal value) {
    this.TypeBytesDecimal = value;
  }

  /**
   * Gets the value of the 'TypeDate' field.
   * @return The value of the 'TypeDate' field.
   */
  public java.time.LocalDate getTypeDate() {
    return TypeDate;
  }


  /**
   * Sets the value of the 'TypeDate' field.
   * @param value the value to set.
   */
  public void setTypeDate(java.time.LocalDate value) {
    this.TypeDate = value;
  }

  /**
   * Gets the value of the 'TypeTimeInMillis' field.
   * @return The value of the 'TypeTimeInMillis' field.
   */
  public java.time.LocalTime getTypeTimeInMillis() {
    return TypeTimeInMillis;
  }


  /**
   * Sets the value of the 'TypeTimeInMillis' field.
   * @param value the value to set.
   */
  public void setTypeTimeInMillis(java.time.LocalTime value) {
    this.TypeTimeInMillis = value;
  }

  /**
   * Gets the value of the 'TypeTimeInMicros' field.
   * @return The value of the 'TypeTimeInMicros' field.
   */
  public java.time.LocalTime getTypeTimeInMicros() {
    return TypeTimeInMicros;
  }


  /**
   * Sets the value of the 'TypeTimeInMicros' field.
   * @param value the value to set.
   */
  public void setTypeTimeInMicros(java.time.LocalTime value) {
    this.TypeTimeInMicros = value;
  }

  /**
   * Gets the value of the 'TypeTimestampInMillis' field.
   * @return The value of the 'TypeTimestampInMillis' field.
   */
  public java.time.Instant getTypeTimestampInMillis() {
    return TypeTimestampInMillis;
  }


  /**
   * Sets the value of the 'TypeTimestampInMillis' field.
   * @param value the value to set.
   */
  public void setTypeTimestampInMillis(java.time.Instant value) {
    this.TypeTimestampInMillis = value;
  }

  /**
   * Gets the value of the 'TypeStringTimestampInMillis' field.
   * @return The value of the 'TypeStringTimestampInMillis' field.
   */
  public java.lang.CharSequence getTypeStringTimestampInMillis() {
    return TypeStringTimestampInMillis;
  }


  /**
   * Sets the value of the 'TypeStringTimestampInMillis' field.
   * @param value the value to set.
   */
  public void setTypeStringTimestampInMillis(java.lang.CharSequence value) {
    this.TypeStringTimestampInMillis = value;
  }

  /**
   * Creates a new DataTypes2 RecordBuilder.
   * @return A new DataTypes2 RecordBuilder
   */
  public static io.datadynamics.template.avro.model.types2.DataTypes2.Builder newBuilder() {
    return new io.datadynamics.template.avro.model.types2.DataTypes2.Builder();
  }

  /**
   * Creates a new DataTypes2 RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new DataTypes2 RecordBuilder
   */
  public static io.datadynamics.template.avro.model.types2.DataTypes2.Builder newBuilder(io.datadynamics.template.avro.model.types2.DataTypes2.Builder other) {
    if (other == null) {
      return new io.datadynamics.template.avro.model.types2.DataTypes2.Builder();
    } else {
      return new io.datadynamics.template.avro.model.types2.DataTypes2.Builder(other);
    }
  }

  /**
   * Creates a new DataTypes2 RecordBuilder by copying an existing DataTypes2 instance.
   * @param other The existing instance to copy.
   * @return A new DataTypes2 RecordBuilder
   */
  public static io.datadynamics.template.avro.model.types2.DataTypes2.Builder newBuilder(io.datadynamics.template.avro.model.types2.DataTypes2 other) {
    if (other == null) {
      return new io.datadynamics.template.avro.model.types2.DataTypes2.Builder();
    } else {
      return new io.datadynamics.template.avro.model.types2.DataTypes2.Builder(other);
    }
  }

  /**
   * RecordBuilder for DataTypes2 instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<DataTypes2>
    implements org.apache.avro.data.RecordBuilder<DataTypes2> {

    private java.lang.Boolean TypeBoolean;
    private java.lang.Integer TypeInt;
    private java.lang.Long TypeLong;
    private java.lang.Float TypeFloat;
    private java.lang.Double TypeDouble;
    private java.lang.CharSequence TypeString;
    private java.math.BigDecimal TypeBytesDecimal;
    private java.time.LocalDate TypeDate;
    private java.time.LocalTime TypeTimeInMillis;
    private java.time.LocalTime TypeTimeInMicros;
    private java.time.Instant TypeTimestampInMillis;
    private java.lang.CharSequence TypeStringTimestampInMillis;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$, MODEL$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(io.datadynamics.template.avro.model.types2.DataTypes2.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.TypeBoolean)) {
        this.TypeBoolean = data().deepCopy(fields()[0].schema(), other.TypeBoolean);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.TypeInt)) {
        this.TypeInt = data().deepCopy(fields()[1].schema(), other.TypeInt);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.TypeLong)) {
        this.TypeLong = data().deepCopy(fields()[2].schema(), other.TypeLong);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.TypeFloat)) {
        this.TypeFloat = data().deepCopy(fields()[3].schema(), other.TypeFloat);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.TypeDouble)) {
        this.TypeDouble = data().deepCopy(fields()[4].schema(), other.TypeDouble);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.TypeString)) {
        this.TypeString = data().deepCopy(fields()[5].schema(), other.TypeString);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.TypeBytesDecimal)) {
        this.TypeBytesDecimal = data().deepCopy(fields()[6].schema(), other.TypeBytesDecimal);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.TypeDate)) {
        this.TypeDate = data().deepCopy(fields()[7].schema(), other.TypeDate);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.TypeTimeInMillis)) {
        this.TypeTimeInMillis = data().deepCopy(fields()[8].schema(), other.TypeTimeInMillis);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.TypeTimeInMicros)) {
        this.TypeTimeInMicros = data().deepCopy(fields()[9].schema(), other.TypeTimeInMicros);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.TypeTimestampInMillis)) {
        this.TypeTimestampInMillis = data().deepCopy(fields()[10].schema(), other.TypeTimestampInMillis);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.TypeStringTimestampInMillis)) {
        this.TypeStringTimestampInMillis = data().deepCopy(fields()[11].schema(), other.TypeStringTimestampInMillis);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
    }

    /**
     * Creates a Builder by copying an existing DataTypes2 instance
     * @param other The existing instance to copy.
     */
    private Builder(io.datadynamics.template.avro.model.types2.DataTypes2 other) {
      super(SCHEMA$, MODEL$);
      if (isValidValue(fields()[0], other.TypeBoolean)) {
        this.TypeBoolean = data().deepCopy(fields()[0].schema(), other.TypeBoolean);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.TypeInt)) {
        this.TypeInt = data().deepCopy(fields()[1].schema(), other.TypeInt);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.TypeLong)) {
        this.TypeLong = data().deepCopy(fields()[2].schema(), other.TypeLong);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.TypeFloat)) {
        this.TypeFloat = data().deepCopy(fields()[3].schema(), other.TypeFloat);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.TypeDouble)) {
        this.TypeDouble = data().deepCopy(fields()[4].schema(), other.TypeDouble);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.TypeString)) {
        this.TypeString = data().deepCopy(fields()[5].schema(), other.TypeString);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.TypeBytesDecimal)) {
        this.TypeBytesDecimal = data().deepCopy(fields()[6].schema(), other.TypeBytesDecimal);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.TypeDate)) {
        this.TypeDate = data().deepCopy(fields()[7].schema(), other.TypeDate);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.TypeTimeInMillis)) {
        this.TypeTimeInMillis = data().deepCopy(fields()[8].schema(), other.TypeTimeInMillis);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.TypeTimeInMicros)) {
        this.TypeTimeInMicros = data().deepCopy(fields()[9].schema(), other.TypeTimeInMicros);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.TypeTimestampInMillis)) {
        this.TypeTimestampInMillis = data().deepCopy(fields()[10].schema(), other.TypeTimestampInMillis);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.TypeStringTimestampInMillis)) {
        this.TypeStringTimestampInMillis = data().deepCopy(fields()[11].schema(), other.TypeStringTimestampInMillis);
        fieldSetFlags()[11] = true;
      }
    }

    /**
      * Gets the value of the 'TypeBoolean' field.
      * @return The value.
      */
    public java.lang.Boolean getTypeBoolean() {
      return TypeBoolean;
    }


    /**
      * Sets the value of the 'TypeBoolean' field.
      * @param value The value of 'TypeBoolean'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeBoolean(java.lang.Boolean value) {
      validate(fields()[0], value);
      this.TypeBoolean = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeBoolean' field has been set.
      * @return True if the 'TypeBoolean' field has been set, false otherwise.
      */
    public boolean hasTypeBoolean() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'TypeBoolean' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeBoolean() {
      TypeBoolean = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeInt' field.
      * @return The value.
      */
    public java.lang.Integer getTypeInt() {
      return TypeInt;
    }


    /**
      * Sets the value of the 'TypeInt' field.
      * @param value The value of 'TypeInt'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeInt(java.lang.Integer value) {
      validate(fields()[1], value);
      this.TypeInt = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeInt' field has been set.
      * @return True if the 'TypeInt' field has been set, false otherwise.
      */
    public boolean hasTypeInt() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'TypeInt' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeInt() {
      TypeInt = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeLong' field.
      * @return The value.
      */
    public java.lang.Long getTypeLong() {
      return TypeLong;
    }


    /**
      * Sets the value of the 'TypeLong' field.
      * @param value The value of 'TypeLong'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeLong(java.lang.Long value) {
      validate(fields()[2], value);
      this.TypeLong = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeLong' field has been set.
      * @return True if the 'TypeLong' field has been set, false otherwise.
      */
    public boolean hasTypeLong() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'TypeLong' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeLong() {
      TypeLong = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeFloat' field.
      * @return The value.
      */
    public java.lang.Float getTypeFloat() {
      return TypeFloat;
    }


    /**
      * Sets the value of the 'TypeFloat' field.
      * @param value The value of 'TypeFloat'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeFloat(java.lang.Float value) {
      validate(fields()[3], value);
      this.TypeFloat = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeFloat' field has been set.
      * @return True if the 'TypeFloat' field has been set, false otherwise.
      */
    public boolean hasTypeFloat() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'TypeFloat' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeFloat() {
      TypeFloat = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeDouble' field.
      * @return The value.
      */
    public java.lang.Double getTypeDouble() {
      return TypeDouble;
    }


    /**
      * Sets the value of the 'TypeDouble' field.
      * @param value The value of 'TypeDouble'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeDouble(java.lang.Double value) {
      validate(fields()[4], value);
      this.TypeDouble = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeDouble' field has been set.
      * @return True if the 'TypeDouble' field has been set, false otherwise.
      */
    public boolean hasTypeDouble() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'TypeDouble' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeDouble() {
      TypeDouble = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeString' field.
      * @return The value.
      */
    public java.lang.CharSequence getTypeString() {
      return TypeString;
    }


    /**
      * Sets the value of the 'TypeString' field.
      * @param value The value of 'TypeString'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeString(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.TypeString = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeString' field has been set.
      * @return True if the 'TypeString' field has been set, false otherwise.
      */
    public boolean hasTypeString() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'TypeString' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeString() {
      TypeString = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeBytesDecimal' field.
      * @return The value.
      */
    public java.math.BigDecimal getTypeBytesDecimal() {
      return TypeBytesDecimal;
    }


    /**
      * Sets the value of the 'TypeBytesDecimal' field.
      * @param value The value of 'TypeBytesDecimal'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeBytesDecimal(java.math.BigDecimal value) {
      validate(fields()[6], value);
      this.TypeBytesDecimal = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeBytesDecimal' field has been set.
      * @return True if the 'TypeBytesDecimal' field has been set, false otherwise.
      */
    public boolean hasTypeBytesDecimal() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'TypeBytesDecimal' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeBytesDecimal() {
      TypeBytesDecimal = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeDate' field.
      * @return The value.
      */
    public java.time.LocalDate getTypeDate() {
      return TypeDate;
    }


    /**
      * Sets the value of the 'TypeDate' field.
      * @param value The value of 'TypeDate'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeDate(java.time.LocalDate value) {
      validate(fields()[7], value);
      this.TypeDate = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeDate' field has been set.
      * @return True if the 'TypeDate' field has been set, false otherwise.
      */
    public boolean hasTypeDate() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'TypeDate' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeDate() {
      TypeDate = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeTimeInMillis' field.
      * @return The value.
      */
    public java.time.LocalTime getTypeTimeInMillis() {
      return TypeTimeInMillis;
    }


    /**
      * Sets the value of the 'TypeTimeInMillis' field.
      * @param value The value of 'TypeTimeInMillis'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeTimeInMillis(java.time.LocalTime value) {
      validate(fields()[8], value);
      this.TypeTimeInMillis = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeTimeInMillis' field has been set.
      * @return True if the 'TypeTimeInMillis' field has been set, false otherwise.
      */
    public boolean hasTypeTimeInMillis() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'TypeTimeInMillis' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeTimeInMillis() {
      TypeTimeInMillis = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeTimeInMicros' field.
      * @return The value.
      */
    public java.time.LocalTime getTypeTimeInMicros() {
      return TypeTimeInMicros;
    }


    /**
      * Sets the value of the 'TypeTimeInMicros' field.
      * @param value The value of 'TypeTimeInMicros'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeTimeInMicros(java.time.LocalTime value) {
      validate(fields()[9], value);
      this.TypeTimeInMicros = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeTimeInMicros' field has been set.
      * @return True if the 'TypeTimeInMicros' field has been set, false otherwise.
      */
    public boolean hasTypeTimeInMicros() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'TypeTimeInMicros' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeTimeInMicros() {
      TypeTimeInMicros = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeTimestampInMillis' field.
      * @return The value.
      */
    public java.time.Instant getTypeTimestampInMillis() {
      return TypeTimestampInMillis;
    }


    /**
      * Sets the value of the 'TypeTimestampInMillis' field.
      * @param value The value of 'TypeTimestampInMillis'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeTimestampInMillis(java.time.Instant value) {
      validate(fields()[10], value);
      this.TypeTimestampInMillis = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeTimestampInMillis' field has been set.
      * @return True if the 'TypeTimestampInMillis' field has been set, false otherwise.
      */
    public boolean hasTypeTimestampInMillis() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'TypeTimestampInMillis' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeTimestampInMillis() {
      TypeTimestampInMillis = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'TypeStringTimestampInMillis' field.
      * @return The value.
      */
    public java.lang.CharSequence getTypeStringTimestampInMillis() {
      return TypeStringTimestampInMillis;
    }


    /**
      * Sets the value of the 'TypeStringTimestampInMillis' field.
      * @param value The value of 'TypeStringTimestampInMillis'.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder setTypeStringTimestampInMillis(java.lang.CharSequence value) {
      validate(fields()[11], value);
      this.TypeStringTimestampInMillis = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'TypeStringTimestampInMillis' field has been set.
      * @return True if the 'TypeStringTimestampInMillis' field has been set, false otherwise.
      */
    public boolean hasTypeStringTimestampInMillis() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'TypeStringTimestampInMillis' field.
      * @return This builder.
      */
    public io.datadynamics.template.avro.model.types2.DataTypes2.Builder clearTypeStringTimestampInMillis() {
      TypeStringTimestampInMillis = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public DataTypes2 build() {
      try {
        DataTypes2 record = new DataTypes2();
        record.TypeBoolean = fieldSetFlags()[0] ? this.TypeBoolean : (java.lang.Boolean) defaultValue(fields()[0]);
        record.TypeInt = fieldSetFlags()[1] ? this.TypeInt : (java.lang.Integer) defaultValue(fields()[1]);
        record.TypeLong = fieldSetFlags()[2] ? this.TypeLong : (java.lang.Long) defaultValue(fields()[2]);
        record.TypeFloat = fieldSetFlags()[3] ? this.TypeFloat : (java.lang.Float) defaultValue(fields()[3]);
        record.TypeDouble = fieldSetFlags()[4] ? this.TypeDouble : (java.lang.Double) defaultValue(fields()[4]);
        record.TypeString = fieldSetFlags()[5] ? this.TypeString : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.TypeBytesDecimal = fieldSetFlags()[6] ? this.TypeBytesDecimal : (java.math.BigDecimal) defaultValue(fields()[6]);
        record.TypeDate = fieldSetFlags()[7] ? this.TypeDate : (java.time.LocalDate) defaultValue(fields()[7]);
        record.TypeTimeInMillis = fieldSetFlags()[8] ? this.TypeTimeInMillis : (java.time.LocalTime) defaultValue(fields()[8]);
        record.TypeTimeInMicros = fieldSetFlags()[9] ? this.TypeTimeInMicros : (java.time.LocalTime) defaultValue(fields()[9]);
        record.TypeTimestampInMillis = fieldSetFlags()[10] ? this.TypeTimestampInMillis : (java.time.Instant) defaultValue(fields()[10]);
        record.TypeStringTimestampInMillis = fieldSetFlags()[11] ? this.TypeStringTimestampInMillis : (java.lang.CharSequence) defaultValue(fields()[11]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<DataTypes2>
    WRITER$ = (org.apache.avro.io.DatumWriter<DataTypes2>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<DataTypes2>
    READER$ = (org.apache.avro.io.DatumReader<DataTypes2>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










